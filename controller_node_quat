#this does not work well... the cost function with the quaternion is not correct
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
import numpy as np
import csv
import socket
import json
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist

from .controller_class import Controller  

class NMPCNode(Node):
    def __init__(self):
        super().__init__('nmpc_controller_node')
        
        #load parameters
        self.declare_parameter('rate', 10)
        self.declare_parameter('trajectory_file', '/home/voyager/data/nicola_watt/trajectories/recorded_odometry.csv')
        self.declare_parameter('min_v', -1)
        self.declare_parameter('max_v', 1)
        self.declare_parameter('min_w', -np.pi/2)
        self.declare_parameter('max_w', np.pi/2)
        
        #retrieve parameter values
        self.rate = self.get_parameter('rate').value
        self.csv_file = self.get_parameter('trajectory_file').value

        #initialise state variables
        self.current_state = None
        
        #initialize data storage for robot trajectory
        self.actual_trajectory = []
        
        #load reference trajectory from csv file
        self.reference_trajectory = self.load_trajectory()
        
        #initialise ROS publishers and subscribers
        #to publish velocity commands 
        self.cmd_vel_pub = self.create_publisher(Twist, 'cmd_vel', 10)
        #to subscribe to odometry
        self.odom_sub = self.create_subscription(Odometry, 'odometry', self.odom_callback, 10)

        #wait for initial position
        self.initial_position_received = False
        self.initial_position = None
        while not self.initial_position_received:
            rclpy.spin_once(self)

        #get controller parameters
        min_v = self.get_parameter('min_v').value
        max_v = self.get_parameter('max_v').value
        min_w = self.get_parameter('min_w').value
        max_w = self.get_parameter('max_w').value
        
        #initialise nmpc controller with initial position and parameters
        self.controller = Controller(min_v, max_v, min_w, max_w, T=1.0/self.rate, N=10)
        self.trajectory_index = 0
        
        #timer for control loop
        self.timer = self.create_timer(1.0/self.rate, self.control_loop)

        #create udp socket to send trajectory data to external plotter
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.plotter_address = ('196.24.154.99', 12345) #hardcoded address for external plotter

        #path-following behaviour options: 'stop' or 'repeat'
        self.path_type = 'stop'
        self.stop = False 

    def load_trajectory(self):
    #function to load reference trajectory from csv file
        reference_trajectory = []
        with open(self.csv_file, 'r') as file:
            csv_reader = csv.reader(file)
            next(csv_reader)
            for row in csv_reader:
                x, y, z, qx, qy, qz, qw = map(float, row)
                reference_trajectory.append([x, y, z, qx, qy, qz, qw])
        return np.array(reference_trajectory)

    def odom_callback(self, msg):
    #function to process odometry messages
        #extract current position
        self.x_position = msg.pose.pose.position.x
        self.y_position = msg.pose.pose.position.y
        self.z_position = msg.pose.pose.position.z
        
        #extract current orientation and convert to euler angles
        self.orientation_qx = msg.pose.pose.orientation.x
        self.orientation_qy = msg.pose.pose.orientation.y
        self.orientation_qz = msg.pose.pose.orientation.z
        self.orientation_qw = msg.pose.pose.orientation.w
        
        #update current state
        self.current_state = np.array([self.x_position, self.y_position, self.z_position, self.orientation_qx, self.orientation_qy, self.orientation_qz, self.orientation_qw])

        #set initial position 
        if not self.initial_position_received:
            self.initial_position = self.current_state
            self.initial_position_received = True
            #self.get_logger().info(f'Initial position set to: {self.initial_position}')

        self.odom_received = True

    def reference_trajectory_N(self):
    #function to retrieve next N steps of the reference trajectory
        N = self.controller.N
        remaining_points = len(self.reference_trajectory) - self.trajectory_index
        
        #check if there are enough points for a full prediction horizon
        if remaining_points >= N + 1:
            ref_traj = self.reference_trajectory[self.trajectory_index:self.trajectory_index+N+1]
        else:
            if self.path_type == 'repeat':
                #loop back to start of reference trajectory
                ref_traj = np.vstack((
                    self.reference_trajectory[self.trajectory_index:],
                    self.reference_trajectory[:N+1-remaining_points]
                ))
            else:
                #pad trajectory with the last point
                ref_traj = np.vstack((
                    self.reference_trajectory[self.trajectory_index:],
                    np.tile(self.reference_trajectory[-1], (N+1-remaining_points, 1))
                ))
        
        #update trajectory index
        self.trajectory_index += 1

        #if end of trajectory is reached
        if self.trajectory_index >= len(self.reference_trajectory):
            if self.path_type == 'repeat':
                #reset to loop trajectory
                self.trajectory_index = 0  
            elif self.path_type == 'stop':
                #stop at end
                self.stop = True
        
        return ref_traj

    def send_data(self):
    #function to send trajectory data to external plotter
        trajectory_data ={
            'actual_x' : float(self.current_state[0]),
            'actual_y' : float(self.current_state[1]),
            'forecast_x': self.controller.next_states[:, 0].tolist() if hasattr(self.controller, 'next_states') else [],
            'forecast_y': self.controller.next_states[:, 1].tolist() if hasattr(self.controller, 'next_states') else [], 
        }

        #send data as json encoded udp
        self.socket.sendto(json.dumps(trajectory_data).encode(), self.plotter_address)

    def control_loop(self):
    #control loop runs periodically
        if not self.odom_received:
            #wait for odometry data
            self.get_logger().info('Waiting for initial odometry data...')
            return
        else:
            #get reference trajectory for next N steps
            ref_trajectory = self.reference_trajectory_N()

            #create array of zero reference controls (ie ideal control is v=0, w=0)
            ref_controls = np.zeros((self.controller.N, 2))
        
            #solve nmpc problem
            optimal_control = self.controller.solve(self.current_state, ref_trajectory, ref_controls)

            #create and publish velocity command
            cmd_vel_msg = Twist()
            if self.stop == True:
                #stop
                cmd_vel_msg.linear.x = 0.0
                cmd_vel_msg.angular.z = 0.0
            else:
                cmd_vel_msg.linear.x = float(optimal_control[0])
                cmd_vel_msg.angular.z = float(optimal_control[1])
    
            self.cmd_vel_pub.publish(cmd_vel_msg)

            #send trajectory data for plotting
            self.send_data()
        
def destroy_node(self):
#function to close udp socket and destroy controller node
        self.socket.close()
        super().destroy_node()

def main(args=None):
#main function to initialise ROS2 and spin node
    rclpy.init(args=args)
    nmpc_node = NMPCNode()
    try:
        rclpy.spin(nmpc_node)
    except KeyboardInterrupt:
        pass
    nmpc_node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
